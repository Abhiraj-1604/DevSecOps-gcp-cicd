pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        GOOGLE_CREDENTIALS = credentials('GCP_SERVICE_ACCOUNT_KEY')
        GCP_PROJECT = 'civic-gate-439511-j2'
        GCR_IMAGE_NAME = 'frontend'  // Repository name
        GCR_REGION = 'us-central1'
        GCR_URI = "${GCR_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCR_IMAGE_NAME}/frontend" // Image name included
        GIT_REPO_NAME = "DevSecOps-gcp-cicd"
        GIT_USER_NAME = "Abhiraj-1604"
    }
    stages {
        stage('Cleaning Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', 
                credentialsId: 'github', 
                url: 'https://github.com/Abhiraj-1604/DevSecOps-gcp-cicd.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=frontend \
                            -Dsonar.projectKey=frontend
                        """
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Initialize gcloud and Docker') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'GCP_SERVICE_ACCOUNT_KEY', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh '''
                            # Install Docker Buildx
                            mkdir -p ~/.docker/cli-plugins
                            curl -SL https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
                            chmod +x ~/.docker/cli-plugins/docker-buildx

                            # Configure Docker and GCloud
                            gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                            gcloud config set project ${GCP_PROJECT}
                            gcloud auth configure-docker ${GCR_REGION}-docker.pkg.dev
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'GCP_SERVICE_ACCOUNT_KEY', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh """
                            docker buildx build --push -t ${GCR_URI}:${BUILD_NUMBER} Application-Code/frontend
                        """
                    }
                }
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image ${GCR_URI}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Update Deployment') {
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            sed -i "s|us-central1-docker.pkg.dev/civic-gate-439511-j2/frontend/frontend:.*|${GCR_URI}:${BUILD_NUMBER}|g" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update image to ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
